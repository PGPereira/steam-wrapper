#!/bin/sh
#  Copyright (C) 2015 - 2016 Peter Kenji Yamanaka
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

##
# Wrapper wrapper_version
##
wrapper_version=0.2.1

# Script variables
conf_location=
debug=
use_runtime=
close_to_tray=
logdir=
log_location=

# Steam Options
steam_options=""
fix_for_game=""
display_pager=0

##
# steam-wrapper
# Packaged by: pyamsoft <pyam(dot)soft(at)gmail(dot)com>
##

##
# Check the environment path for the given binary, exit if it is not found
##
check_binary()
{
  if ! which "$1" > /dev/null 2>&1; then
    logn "The '$1' binary is required for operation of this script."
    logn "Please install '$1' onto your system."
    exit 1
  fi
}

##
# Log opening
##
log_opening()
{
  log "steam-wrapper[${wrapper_version}]: Launched on "
  logn "$(date +%Y-%m-%d) at $(date +%R) [$(date +%r)]"
}

##
# Log the steam-wrapper configuration location
##
log_config_location()
{
  log "steam-wrapper[${wrapper_version}]: "
  if [ ! -z "${conf_location}" ]; then
    logn "Configuration file found at: ${conf_location}"
  else
    logn "Using preset defaults."
  fi
}

##
# Has required Steam folders
##
steam_folder_exists()
{
  if [ -d "${HOME}/.steam" ]; then
    log "steam-wrapper[${wrapper_version}]: "
    logn "Steam folder exists, can continue"
    return 0
  else
    log "steam-wrapper[${wrapper_version}]: "
    logn "Steam folder does not exist, launch Steam once first"
    return 1
  fi
}

##
# Remove some files that apperantly conflict with native runtimes on ArchLinux
#
# Read for details:
#     https://wiki.archlinux.org/index.php/steam#Steam_runtime_issues
##
remove_stale_files()
{
  local location_one="${HOME}/.local/share/Steam/"
  local location_two="${HOME}/.steam/root/"
  logn "steam-wrapper[${wrapper_version}]: Removing of stale libraries..."

  # Need to double up on these as the output will overwrite the logfile
  # Print to stdout and don't remove, then print to file and delete
  find_remove_stale_files "${location_one}" " "
  find_remove_stale_files "${location_two}" " "

  find_remove_stale_files "${location_one}" "-delete" >> "${log_location}"
  find_remove_stale_files "${location_two}" "-delete" >> "${log_location}"

  unset location_one location_two
}

##
# Remove some files that apperantly conflict with native runtimes on ArchLinux
#
# Takes find start location as $1 and the delete option as $2 when used
##
find_remove_stale_files()
{
  if [ -d "$1" ]; then
    find "$1" \( -name "libgcc_s.so*" \
      -o -name "libasound.so*" \
      -o -name "libstdc++.so*" \
      -o -name "libxcb.so*" \) -print $2
  fi
}

##
# Link the flash player library on 64 bit systems
##
link_lib32_flash()
{
  local xbit="x86_64"
  local arch=$(uname -m)
  local flash_steam_location="${HOME}/.steam/bin/plugins/libflashplayer.so"
  local flash_lib_location="/usr/lib32/mozilla/plugins/libflashplayer.so"
  if [ "${arch}" = "${xbit}" ]; then
    logn "steam-wrapper[${wrapper_version}]: Linking lib32-libflashplayer.so"
    if [ -f "${flash_steam_location}" ]; then
      logn "steam-wrapper[${wrapper_version}]: Flashplayer is already linked."
    elif [ -f "${flash_lib_location}" ]; then
      mkdir -p "${HOME}/.steam/bin/plugins"
      ##
      # This path to the flashplugin may be different on
      # other distributions, this is the path on ArchLinux.
      ##
      ln -sf /usr/lib32/mozilla/plugins/libflashplayer.so \
        "${flash_steam_location}"
      logn "steam-wrapper[${wrapper_version}]: Linked libflashplayer.so"
    else
      logn "steam-wrapper[${wrapper_version}]: Cannot find libflashplayer.so"
    fi
  fi
  unset xbit arch flash_lib_location flash_steam_location
}

##
# Log the wrapper variables used.
##
log_wrapper_usage()
{
  logn "steam-wrapper[${wrapper_version}]: Done."
  logn "steam-wrapper[${wrapper_version}]: Launching Steam with environment:"
  logn "steam-wrapper[${wrapper_version}]:     STEAM_RUNTIME = ${use_runtime}"
  log  "steam-wrapper[${wrapper_version}]: "
  logn "    STEAM_FRAME_FORCE_CLOSE = ${close_to_tray}"
}

##
# Searches for the steam-wrapper.conf file in a couple of specified locations.
# The first found file will be used as the configuration file
##
find_conf()
{
  local conf_location=""
  if [ -f "${HOME}/.steam-wrapper/steam-wrapper.conf" ]; then
    conf_location="${HOME}/.steam-wrapper/steam-wrapper.conf"
  elif [ -f "${HOME}/.steam-wrapper.conf" ]; then
    conf_location="${HOME}/.steam-wrapper.conf"
  elif [ -f "/etc/steam-wrapper/steam-wrapper.conf" ]; then
    conf_location="/etc/steam-wrapper/steam-wrapper.conf"
  elif [ -f "/etc/steam-wrapper.conf" ]; then
    conf_location="/etc/steam-wrapper.conf"
  fi
  printf -- "${conf_location}"
  unset conf_location
}

##
# Logs output to the log file and/or stdout
##
log()
{
  if [ "${debug}" -eq 1 ]; then
    printf -- "$@" >> "${log_location}"
  fi

  printf -- "$@"
}

##
# Wrapper function for the log function, appends a newline
##
logn()
{
  log "$@\n"
}

##
# Prepare the main function by discovering variables
##
prepare()
{
  conf_location=$(find_conf) || return 1

  ##
  # If a configuration file was present, source it for use, otherwise
  # we will use pre-defined varialbes which are arguably sensible by
  # default.
  ##
  if [ ! -z "${conf_location}" ]; then
    . "${conf_location}"
  else
    debug=1
    use_runtime=1
    close_to_tray=1
    logdir="${HOME}/.steam-wrapper/"
  fi

  # Create logdir
  log_location="${logdir}/steam-wrapper.log"
  check_binary mkdir || return 1
  mkdir -p "${logdir}" || return 1
}

display_fix_for_game()
{
  case "${fix_for_game}" in
    "bl2"|"borderlands2")
      printf -- "Borderlands 2\n"
      echo
      printf -- "Can't connect to SHIFT\n"
      echo
      printf -- "On non-Ubuntu systems, the /usr/lib/ssl directory may\n"
      printf -- "not always be present. Borderlands 2 expects a certain\n"
      printf -- "SSL cert to be present in this directory, and SHFIT will\n"
      printf -- "if it is not found. To fix this, supply the SSL_CERT_DIR in\n"
      printf -- "the game launch options: \n"
      echo
      printf -- "SSL_CERT_DIR=\"/etc/ssl/certs\" %%command%% <launch options>\n"
      echo
      ;;
    *)
      logn "Unsupported game: ${fix_for_game}"
  esac

  # Displaying fixes are currently a one stop shop.
  return 1
}

option_parse()
{
  while [ $# -ge 1 ]; do
    case "$1" in
      "-r"|"--use-runtime")
        use_runtime="$2"
        log  "steam-wrapper[${wrapper_version}]:"
        log  " Value of: \$use_runtime overwritten"
        logn " by cmd argument: ${use_runtime}"
        shift
        ;;
      "-t"|"--close-to-tray")
        close_to_tray="$2"
        log  "steam-wrapper[${wrapper_version}]:"
        log  " Value of: \$close_to_tray overwritten"
        logn " by cmd argument: ${close_to_tray}"
        shift
        ;;
      "-f"|"--display-fix")
        fix_for_game="$2"
        shift
        ;;
      "-l"|"--display-log")
        display_pager=1
        shift
        ;;
      "-h"|"--help")
        printf -- "steam-wrapper[${wrapper_version}]\n"
        echo
        printf -- "option\n"
        echo
        printf -- "-r|--use-runtime   <0|1> Use the steam runtime\n"
        printf -- "-t|--close-to-tray <0|1> Close Steam to tray\n"
        printf -- "-l|--display-log         Display the log file\n"
        printf -- "-f|--display-fix <game>  Display fixes for Steam games\n"
        echo
        printf -- "supported fix\n"
        printf -- "  bl2                    Borderlands 2\n"
        echo
        printf -- "-h|--help                Display this help\n"
        echo
        return 1
        ;;
      *)
        steam_options="$2 ${steam_options}"
        shift
        ;;
    esac
  done

  # Check the use_runtime and close_to_tray variable validity
  if [ "${use_runtime}" != "0" ] && [ "${use_runtime}" != "1" ]; then
    logn "Bad value specified in \$use_runtime: ${use_runtime}"
    return 1
  fi

  if [ "${close_to_tray}" != "0" ] && [ "${close_to_tray}" != "1" ]; then
    logn "Bad value specified in \$close_to_tray: ${close_to_tray}"
    return 1
  fi

  if [ ! -z "${fix_for_game}" ]; then
    display_fix_for_game || return 1
  fi
}

main()
{
  check_binary find || return 1
  check_binary steam || return 1

  log_opening || return 1
  log_config_location || return 1
  steam_folder_exists || return 1
  remove_stale_files || return 1
  link_lib32_flash || return 1
  log_wrapper_usage || return 1


  # Log completion
  # Extra newline
  logn "steam-wrapper[${wrapper_version}]: Run complete, launch Steam\n"

  ##
  # Run steam using the wrapper
  ##
  exec env \
    STEAM_RUNTIME="${use_runtime}" \
    STEAM_FRAME_FORCE_CLOSE="${close_to_tray}" \
    steam "$@"

  return 0
}

# Check for required binaries, exit out if they are not present
prepare || exit 1
option_parse "$@" || exit 1

# Check if pager is set
# TODO Add support for a $PAGER variable
if [[ "${display_pager}" -eq 1 ]]; then

  # Check for the PAGER environment variable
  # Conditional assignment works when using the set -u option
  : "${PAGER:=less}"

  # Using the pager requires extra binary
  check_binary "${PAGER}"
  log "steam-wrapper[${wrapper_version}]: "
  logn "Displaying ${log_location} in ${PAGER}..."

  "${PAGER}" "${log_location}"
  log "steam-wrapper[${wrapper_version}]: "
  logn "Exiting...\n"

  # Clean exit
  exit 0
fi

main "${steam_options}" || exit 1
exit 0

# vim: set syntax=sh tabstop=2 softtabstop=2 shiftwidth=2 shiftround expandtab:
