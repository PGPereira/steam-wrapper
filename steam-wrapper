#!/usr/bin/env bash

set -o pipefail

##
# Wrapper wrapper_version
##
wrapper_version=0.2.0

# Script variables
conf_location=
debug=
use_runtime=
close_to_tray=
logdir=
log_location=

##
# steam-wrapper
# Packaged by: pyamsoft <pyam(dot)soft(at)gmail(dot)com>
##

##
# Check the environment path for the given binary, exit if it is not found
##
check_binary() {
  if ! which "$1" > /dev/null 2>&1; then
    printf -- "The '%s' binary is required for operation of this script.\n" "$1"
    printf -- "Please install '%s' onto your system.\n" "$1"
    exit 1
  fi
}

##
# Log opening
##
log_opening()
{
  log "steam-wrapper[${wrapper_version}]: Launched on "
  logn "$(date +%Y-%m-%d) at $(date +%R) [$(date +%r)]"
}

##
# Log the steam-wrapper configuration location
##
log_config_location()
{
  log "steam-wrapper[${wrapper_version}]: "
  if [[ ! -z ${conf_location} ]]; then
    logn "Configuration file found at: ${conf_location}"
  else
    logn "Using preset defaults."
  fi
}

##
# Has required Steam folders
##
steam_folder_exists()
{
  if [[ -d "${HOME}/.steam" ]]; then
    log "steam-wrapper[${wrapper_version}]: "
    logn "Steam folder exists, can continue"
    return 0
  else
    log "steam-wrapper[${wrapper_version}]: "
    logn "Steam folder does not exist, launch Steam once first"
    return 1
  fi
}

##
# Remove some files that apperantly conflict with native runtimes on ArchLinux
#
# Read for details:
#     https://wiki.archlinux.org/index.php/steam#Steam_runtime_issues
##
remove_stale_files()
{
  local location_one="${HOME}/.local/share/Steam/"
  local location_two="${HOME}/.steam/root/"
  logn "steam-wrapper[${wrapper_version}]: Removing of stale libraries..."

  # Need to double up on these as the output will overwrite the logfile
  # Print to stdout and don't remove, then print to file and delete
  find_remove_stale_files "${location_one}" " "
  find_remove_stale_files "${location_two}" " "

  find_remove_stale_files "${location_one}" "-delete" >> "${log_location}"
  find_remove_stale_files "${location_two}" "-delete" >> "${log_location}"

  unset location_one location_two
}

##
# Remove some files that apperantly conflict with native runtimes on ArchLinux
#
# Takes find start location as $1 and the delete option as $2 when used
##
find_remove_stale_files()
{
  find "$1" \( -name "libgcc_s.so*" \
    -o -name "libasound.so*" \
    -o -name "libstdc++.so*" \
    -o -name "libxcb.so*" \) -print $2
}

##
# Link the flash player library on 64 bit systems
##
link_lib32_flash()
{
  local xbit="x86_64"
  local arch=$(uname -m)
  local flash_steam_location="${HOME}/.steam/bin/plugins/libflashplayer.so"
  local flash_lib_location="/usr/lib32/mozilla/plugins/libflashplayer.so"
  if [[ "${arch}" = "${xbit}" ]]; then
    logn "steam-wrapper[${wrapper_version}]: Linking lib32-libflashplayer.so"
    if [[ -f "${flash_steam_location}" ]]; then
      logn "steam-wrapper[${wrapper_version}]: Flashplayer is already linked."
    elif [[ -f "${flash_lib_location}" ]]; then
      mkdir -p "${HOME}/.steam/bin/plugins"
      ##
      # This path to the flashplugin may be different on
      # other distributions, this is the path on ArchLinux.
      ##
      ln -sf /usr/lib32/mozilla/plugins/libflashplayer.so \
        "${flash_steam_location}"
      logn "steam-wrapper[${wrapper_version}]: Linked libflashplayer.so"
    else
      logn "steam-wrapper[${wrapper_version}]: Cannot find libflashplayer.so"
    fi
  fi
  unset xbit arch flash_lib_location flash_steam_location
}

##
# Log the wrapper variables used.
##
log_wrapper_usage()
{
  logn "steam-wrapper[${wrapper_version}]: Done."
  logn "steam-wrapper[${wrapper_version}]: Launching Steam with environment:"
  logn "steam-wrapper[${wrapper_version}]:     STEAM_RUNTIME = ${use_runtime}"
  log  "steam-wrapper[${wrapper_version}]: "
  logn "    STEAM_FRAME_FORCE_CLOSE = ${close_to_tray}"
}

##
# Searches for the steam-wrapper.conf file in a couple of specified locations.
# The first found file will be used as the configuration file
##
find_conf()
{
  local conf_location=""
  if [[ -f ${HOME}/.steam-wrapper/steam-wrapper.conf ]]; then
    conf_location="${HOME}/.steam-wrapper/steam-wrapper.conf"
  elif [[ -f ${HOME}/.steam-wrapper.conf ]]; then
    conf_location="${HOME}/.steam-wrapper.conf"
  elif [[ -f /etc/steam-wrapper/steam-wrapper.conf ]]; then
    conf_location="/etc/steam-wrapper/steam-wrapper.conf"
  elif [[ -f /etc/steam-wrapper.conf ]]; then
    conf_location="/etc/steam-wrapper.conf"
  fi
  printf -- "${conf_location}"
  unset conf_location
}

##
# Logs output to the log file and/or stdout
##
log()
{
  if [[ "${debug}" -eq 1 ]]; then
    printf -- "$@" >> "${log_location}"
  fi

  printf -- "$@"
}

##
# Wrapper function for the log function, appends a newline
##
logn()
{
  log "$@\n"
}

##
# Prepare the main function by discovering variables
##
prepare()
{
  conf_location=$(find_conf) || return 1

  ##
  # If a configuration file was present, source it for use, otherwise
  # we will use pre-defined varialbes which are arguably sensible by
  # default.
  ##
  if [[ ! -z "${conf_location}" ]]; then
    source "${conf_location}"
  else
    debug=1
    use_runtime=1
    close_to_tray=1
    logdir="${HOME}/.steam-wrapper/"
  fi

  # Create logdir
  log_location="${logdir}/steam-wrapper.log"
  mkdir -p "${logdir}"
}


main()
{
  log_opening || return 1
  log_config_location || return 1
  steam_folder_exists || return 1
  remove_stale_files || return 1
  link_lib32_flash || return 1
  log_wrapper_usage || return 1

  # Allow the user to over ride the runtime and close to tray by
  # passing in command line arguments
  # Use runtime
  if [[ ! -z "$1" ]]; then
    case "$1" in
      "1"|"on"|"ON"|"yes"|"YES"|"y"|"Y")
        use_runtime=1
        log  "steam-wrapper[${wrapper_version}]:"
        log  " Value of: \$use_runtime overwritten"
        logn " by cmd argument: ${use_runtime}"
        ;;
      "0"|"off"|"OFF"|"no"|"NO"|"n"|"N")
        use_runtime=0
        log  "steam-wrapper[${wrapper_version}]:"
        log  " Value of: \$use_runtime overwritten"
        logn " by cmd argument: ${use_runtime}"
        ;;
      *)
        logn "Invalid option passed."
        return 1
        ;;
    esac

    # Shift arguments by 1
    shift

    # Close to tray
    if [[ ! -z "$1" ]]; then
      case "$1" in
        "1"|"on"|"ON"|"yes"|"YES"|"y"|"Y")
          close_to_tray=1
          log  "steam-wrapper[${wrapper_version}]:"
          log  " Value of: \$close_to_tray overwritten"
          logn " by cmd argument: ${close_to_tray}"
          ;;
        "0"|"off"|"OFF"|"no"|"NO"|"n"|"N")
          close_to_tray=0
          log  "steam-wrapper[${wrapper_version}]:"
          log  " Value of: \$close_to_tray overwritten"
          logn " by cmd argument: ${close_to_tray}"
          ;;
        *)
          logn "Invalid option passed."
          return 1
          ;;
      esac
    fi

    # Shift arguments by 1
    shift
  fi

  # Log completion
  # Extra newline
  logn "steam-wrapper[${wrapper_version}]: Run complete, launch Steam\n"

  ##
  # Run steam using the wrapper
  ##
  exec env \
    STEAM_RUNTIME="${use_runtime}" \
    STEAM_FRAME_FORCE_CLOSE="${close_to_tray}" \
    steam "$@"

  return 0
}

# Check for required binaries, exit out if they are not present
check_binary find
check_binary printf
check_binary steam

prepare || exit 1
main $@ || exit 1
exit 0

# vim: set syntax=sh tabstop=2 softtabstop=2 shiftwidth=2 shiftround expandtab:
