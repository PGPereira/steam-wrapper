#!/usr/bin/env bash

set -o pipefail

##
# Wrapper wrapper_version
##
wrapper_version=0.1.10

##
# steam-wrapper
# Packaged by: pyamsoft <pyam(dot)soft(at)gmail(dot)com>
##

##
# Check the environment path for the given binary, exit if it is not found
##
check_binary() {
  if ! which "$1" > /dev/null 2>&1; then
    printf "The '%s' binary is required for operation of this" "$1"
                printf " script.\n"
    printf "Please install '%s' onto your system.\n" "$1"
    exit 1
  fi
}

##
# Log opening
##
log_opening()
{
  if [[ "${debug}" -eq 1 ]]; then
    echo -n "steam-wrapper[${wrapper_version}]: Launched on " \
                        >> "${log}"
    echo "$(date +%Y-%m-%d) at $(date +%R) [$(date +%r)]" \
                        >> "$log"
  fi
}

##
# Log the steam-wrapper configuration location
##
log_config_location()
{
  if [[ "${debug}" -eq 1 ]]; then
    if [[ $conf_location != "" ]]; then
      echo -n "steam-wrapper[${wrapper_version}]: " \
                                >> "${log}"
      echo -n "Configuration file " >> "${log}"
      echo "found at: $conf_location" >> "${log}"
    else
      echo -n "steam-wrapper[${wrapper_version}]: " \
                                >> "${log}"
      echo -n "No configuration " >> "${log}"
      echo -n "file found: " >> "${log}"
      echo "Using preset defaults." >> "${log}"
    fi
  fi
}

##
# Has required Steam folders
##
steam_folder_exists()
{
  if [[ -d $HOME/.steam ]]; then
    echo -n "steam-wrapper[${wrapper_version}]: Steam folder " \
                        >> "${log}"
    echo "exists, can continue" >> "${log}"
    return 0
  else
    echo -n "steam-wrapper[${wrapper_version}]: Steam folder " \
                        >> "${log}"
    echo "doesn't exist, launch Steam first" >> "${log}"
    echo -n "steam-wrapper[${wrapper_version}]: Steam folder "
    echo "doesn't exist, launch Steam first"
    return 1
  fi
}

##
# Remove some files that apperantly conflict with native runtimes on ArchLinux
#
# Read for details:
#     https://wiki.archlinux.org/index.php/steam#Steam_runtime_issues
##
remove_stale_files()
{
  if [[ "${debug}" -eq 1 ]]; then
    echo -n "steam-wrapper[${wrapper_version}]: Attempting " \
                        >> "${log}"
    echo "removal of stale libraries..." >> "${log}"
                find $HOME/.steam/root/ \( -name "libgcc_s.so*" \
                        -o -name "libasound.so*" \
                        -o -name "libstdc++.so*" \
                        -o -name "libxcb.so*" \) \
                        -print -delete >> "${log}"
                find $HOME/.local/share/Steam/ \( -name "libgcc_s.so*" \
                        -o -name "libasound.so*" \
                        -o -name "libstdc++.so*" \
                        -o -name "libxcb.so*" \) \
                        -print -delete >> "${log}"
  else
                find $HOME/.steam/root/ \( -name "libgcc_s.so*" \
                        -o -name "libasound.so*" \
                        -o -name "libstdc++.so*" \
                        -o -name "libxcb.so*" \) \
                        -delete
                find $HOME/.local/share/Steam/ \( -name "libgcc_s.so*" \
                        -o -name "libasound.so*" \
                        -o -name "libstdc++.so*" \
                        -o -name "libxcb.so*" \) \
                        -delete
  fi
}

##
# Link the flash player library on 64 bit systems
##
link_lib32_flash()
{
  local arch=$(uname -m)
  if [[ $arch = "x86_64" ]]; then
    [[ "${debug}" -eq 1 ]] && {
      echo -n "steam-wrapper[${wrapper_version}]: " \
                                >> "${log}"
      echo -n "Attempt linking of lib32 " >> "${log}"
      echo "libflashplayer.so" >> "${log}"
    }
    if [[ -f $HOME/.steam/bin/plugins/libflashplayer.so ]]; then
      if [[ "${debug}" -eq 1 ]]; then
        echo -n "steam-wrapper[${wrapper_version}]: " \
                                        >> "${log}"
        echo "Flashplayer is already linked." \
                                        >> "${log}"
      fi
    elif [[ -f /usr/lib32/mozilla/plugins/libflashplayer.so ]]; then
      mkdir -p $HOME/.steam/bin/plugins
      ##
      # This path to the flashplugin may be different on
      # other distributions, this is the path on ArchLinux.
      ##
      ln -sf /usr/lib32/mozilla/plugins/libflashplayer.so \
        $HOME/.steam/bin/plugins/libflashplayer.so
      if [[ "${debug}" -eq 1 ]]; then
        echo -n "steam-wrapper[${wrapper_version}]: " \
                                        >> "${log}"
        echo "Linked libflashplayer.so" >> "${log}"
      fi
    else
      if [[ "${debug}" -eq 1 ]]; then
        echo -n "steam-wrapper[${wrapper_version}]: " \
                                        >> "${log}"
        echo "Cannot find libflashplayer.so" >> "${log}"
      fi
    fi
  fi
  unset arch
}

##
# Log the wrapper variables used.
##
log_wrapper_usage()
{
  if [[ "${debug}" -eq 1 ]]; then
    echo "steam-wrapper[${wrapper_version}]: Done." >> "${log}"
    echo -n "steam-wrapper[${wrapper_version}]: Launching" \
                        >> "${log}"
    echo " Steam with environment:" >> "${log}"
    echo -n "steam-wrapper[${wrapper_version}]:" >> "${log}"
                echo -n "    STEAM_RUNTIME =" >> "${log}"
    echo " ${use_runtime}" >> "${log}"
    echo -n "steam-wrapper[${wrapper_version}]:    " >> "${log}"
    echo -n "STEAM_FRAME_FORCE_CLOSE = " >> "${log}"
    echo "${close_to_tray}" >> "${log}"
    echo >> "${log}"
  fi
}

##
# Searches for the steam-wrapper.conf file in a couple of specified locations.
# The first found file will be used as the configuration file
##
find_conf()
{
  local conf_location=""
  if [[ -f $HOME/.steam-wrapper/steam-wrapper.conf ]]; then
    conf_location="$HOME/.steam-wrapper/steam-wrapper.conf"
  elif [[ -f $HOME/.steam-wrapper.conf ]]; then
    conf_location="$HOME/.steam-wrapper.conf"
  elif [[ -f /etc/steam-wrapper/steam-wrapper.conf ]]; then
    conf_location="/etc/steam-wrapper/steam-wrapper.conf"
  elif [[ -f /etc/steam-wrapper.conf ]]; then
    conf_location="/etc/steam-wrapper.conf"
  fi
  echo "${conf_location}"
  unset conf_location
}

main()
{
  local conf_location=
  local debug=
  local use_runtime=
  local close_to_tray=
  local logdir=
  local log=

  conf_location=$(find_conf) || return 1

  ##
  # If a configuration file was present, source it for use, otherwise
  # we will use pre-defined varialbes which are arguably sensible by
  # default.
  ##
  if [[ "${conf_location}" != "" ]]; then
    source "${conf_location}"
  else
    debug=1
    use_runtime=1
    close_to_tray=1
    logdir="$HOME/.steam-wrapper/"
  fi

    logdir="$HOME/.steam-wrapper/"
  # Create logdir
  log="$logdir/steam-wrapper.log"
  mkdir -p "${logdir}"

  log_opening || return 1
  log_config_location || return 1

  # Allow the user to over ride the runtime and close to tray by
  # passing in command line arguments
  # Use runtime
  if [[ ! -z "$1" ]]; then
    case "$1" in
      "1"|"on"|"ON"|"yes"|"YES"|"y"|"Y")
        use_runtime=1
        if [[ "${debug}" -eq 1 ]]; then
          echo -n "steam-wrapper[${wrapper_version}]:" >> "${log}"
          echo -n " Value of: \$use_runtime overwritten" >> "${log}"
          echo "  by cmd argument: ${use_runtime}" >> "${log}"
        fi
        ;;
      "0"|"off"|"OFF"|"no"|"NO"|"n"|"N")
        use_runtime=0
        if [[ "${debug}" -eq 1 ]]; then
          echo -n "steam-wrapper[${wrapper_version}]:" >> "${log}"
          echo -n " Value of: \$use_runtime overwritten" >> "${log}"
          echo "  by cmd argument: ${use_runtime}" >> "${log}"
        fi
        ;;
      *)
        printf -- "Invalid option passed.\n"
        return 1
        ;;
    esac

    # Close to tray
    if [[ ! -z "$2" ]]; then
      case "$2" in
        "1"|"on"|"ON"|"yes"|"YES"|"y"|"Y")
          close_to_tray=1
          if [[ "${debug}" -eq 1 ]]; then
            echo -n "steam-wrapper[${wrapper_version}]:" >> "${log}"
            echo -n " Value of: \$close_to_tray overwritten" >> ${log}
            echo "  by cmd argument: ${close_to_tray}" >> "${log}"
          fi
          ;;
        "0"|"off"|"OFF"|"no"|"NO"|"n"|"N")
          close_to_tray=0
          if [[ "${debug}" -eq 1 ]]; then
            echo -n "steam-wrapper[${wrapper_version}]:" >> "${log}"
            echo -n " Value of: \$close_to_tray overwritten" >> ${log}
            echo "  by cmd argument: ${close_to_tray}" >> "${log}"
          fi
          ;;
        *)
          printf -- "Invalid option passed.\n"
          return 1
          ;;
      esac
    fi
  fi

  steam_folder_exists || return 1
  remove_stale_files || return 1
  link_lib32_flash || return 1
  log_wrapper_usage || return 1

  ##
  # Clean up some of the unused vars
  ##
  unset debug logdir log conf_location

  ##
  # Run steam using the wrapper
  ##
  exec env \
    STEAM_RUNTIME="${use_runtime}" \
    STEAM_FRAME_FORCE_CLOSE="${close_to_tray}" \
    steam "$@"
  return 0
}

# Check for required binaries, exit out if they are not present
check_binary find
check_binary printf

main $@ || exit 1
exit 0

# vim: set syntax=sh tabstop=2 softtabstop=2 shiftwidth=2 shiftround expandtab:
